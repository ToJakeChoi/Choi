setwd("C:/Rtest")
install.packages(c( "randomForest", "rpart","boot","data.table", "caret" ))
install.packages(c( "rattle", "rpart.plot", "RColorBrewer", "e1071"))

library(dplyr); library(ggplot2); library(MASS); library(randomForest); library(rpart); library(boot); library(data.table); library(caret)

#데이터 로드 및 변수 이름 정리####
data <- tbl_df(read.table("spambase.data", strip.white = TRUE,
                          sep=",", header = FALSE))

names(data) <- c('word_freq_make', 'word_freq_address', 'word_freq_all', 'word_freq_3d', 'word_freq_our',
                 'word_freq_over', 'word_freq_remove', 'word_freq_internet', 'word_freq_order', 'word_freq_mail',
                 'word_freq_receive', 'word_freq_will', 'word_freq_people', 'word_freq_report', 'word_freq_addresses',
                 'word_freq_free', 'word_freq_business', 'word_freq_email', 'word_freq_you', 'word_freq_credit',
                 'word_freq_your', 'word_freq_font', 'word_freq_000', 'word_freq_money', 'word_freq_hp',
                 'word_freq_hpl', 'word_freq_george', 'word_freq_650', 'word_freq_lab', 'word_freq_labs',
                 'word_freq_telnet', 'word_freq_857', 'word_freq_data', 'word_freq_415', 'word_freq_85',
                 'word_freq_technology', 'word_freq_1999', 'word_freq_parts', 'word_freq_pm', 'word_freq_direct',
                 'word_freq_cs', 'word_freq_meeting', 'word_freq_original', 'word_freq_project', 'word_freq_re',
                 'word_freq_edu', 'word_freq_table', 'word_freq_conference', 'char_freq_;', 'char_freq_(',
                 'char_freq_[', 'char_freq_!', 'char_freq_$', 'char_freq_#', 'capital_run_length_average',
                 'capital_run_length_longest', 'capital_run_length_total', 'class')

data$class <- factor(data$class)
##범주형 변수로 변환(스팸메일 인지/아닌지 이기 때문에 범주형 입니다.)
##데이터 준비 끝

glimpse(data) 
str(data) 
summary(data)

####상관계수 탐색(1)####
data_1 <- subset(data, select = c(word_freq_make, word_freq_address, word_freq_all, class))
#모든 변수를 한꺼번에 그리는 것이 쉽지 않아, 부분적으로 먼저 확인해보겠습니다.

####상관계수 탐색(1)####

#아래 코드는 산점도 행렬의 위쪽에 상관계수 숫자를 집어넣는 사용자 정의 함수 입니다.
#출처: https://rfriend.tistory.com/83 [R, Python 분석과 프로그래밍의 친구 (by R Friend)]

panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y))
  txt <- format(c(r, 0.123456789), digits = digits)[1]
  txt <- paste0(prefix, txt)
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r * 5)
}

pairs(data_1,
      upper.panel = panel.cor,
      pch="*"
)
####상관계수 탐색(2)####
tmp <- as.data.frame(cor(data[,-58], as.numeric(data$class)))
tmp <- tmp %>% rename(cor=V1)
tmp$var <- rownames(tmp)
tmp %>%
  ggplot(aes(reorder(var, cor), cor)) +
  geom_point() +
  coord_flip()

####의사결정나무분석####

####데이터 분할####
set.seed(20210118)
intrain<-createDataPartition(y=data$class, p=0.7, list=FALSE)
train<-data[intrain, ] #학습용 데이터 70%
test<-data[-intrain, ] #평가용 데이터 30#

####의사삭사결정나무분석 패키지설치####
install.packages(c("rattle", "rpart.plot", "RColorBrewer"))
library(rattle) #Fancy tree plot
library(rpart.plot) # Enhanced tree plots
library(RColorBrewer) # Color selection for fancy tree
#가끔 rattle패키지가 리눅스 기반에서는 설치 안되는 경우가 있어요.



####트리그리기####
rpart_spam<-rpart(class~. , data=data, method="class")
plot(rpart_spam); text(rpart_spam) 

####트리의 과적합을 방지하기 위해 가지치기####
printcp(rpart_spam); plotcp(rpart_spam) 
#과적합 방지를 위해 cp(Complexity Parameter, 복잡성 매개변수)값을 통해 가지치기 실시


rpart_spam_pruning <-prune(rpart_spam,
                           cp = rpart_spam$cptable[which.min(rpart_spam$cptable[,"xerror"]),"CP"]
)

#트리 요약값 정리
summary(rpart_spam_pruning)
#fancy한 트리 생성
fancyRpartPlot(rpart_spam_pruning, 
               cex = 1
)

rpart_spam_predict<-predict(rpart_spam_pruning, test, type ='class')
confusionMatrix(rpart_spam_predict, test$class)
